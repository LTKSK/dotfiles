[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Townk/vim-autoclose'

[[plugins]]
repo = 'mattn/emmet-vim'

[[plugins]]
repo = 'prettier/vim-prettier'
build = '''
  yarn install
'''

[[plugins]]
repo = 'leafgarland/typescript-vim'

[[plugins]]
repo = 'maxmellon/vim-jsx-pretty'

[[plugins]]
repo = 'peitalin/vim-jsx-typescript'

[[plugins]]
repo = 'neovim/node-host'
build = '''
  npm install
'''

[[plugins]]
repo = 'billyvg/tigris.nvim'
build = '''
  ./install.sh
'''

[[plugins]]
repo = 'vim-airline/vim-airline'

[[plugins]]
repo = 'mattn/vim-lexiv' 

[[plugins]]
repo = 'lambdalisue/fern.vim'
hook_add = '''
  nnoremap ,t :<c-u>Fern . -drawer -stay -keep -toggle -reveal=%<cr>

  function! s:fern_setup() abort
    nnoremap <buffer> <nowait> q :<c-u>quit<cr>
    nmap <buffer>
      \ <Plug>(fern-action-open)
      \ <Plug>(fern-action-open:select)
  endfunction

  augroup __fern__
    au!
    autocmd VimEnter * ++nested Fern . -drawer -stay -keep -toggle -reveal=%
    autocmd FileType fern call s:fern_setup()
  augroup END

  nmap <buffer> o <Plug>(fern-action-open:edit)
  nmap <buffer> go <Plug>(fern-action-open:edit)<C-w>p
  nmap <buffer> t <Plug>(fern-action-open:tabedit)
  nmap <buffer> T <Plug>(fern-action-open:tabedit)gT
  nmap <buffer> i <Plug>(fern-action-open:split)
  nmap <buffer> gi <Plug>(fern-action-open:split)<C-w>p
  nmap <buffer> s <Plug>(fern-action-open:vsplit)
  nmap <buffer> gs <Plug>(fern-action-open:vsplit)<C-w>p
'''

[[plugins]]
repo = 'tyru/caw.vim' 
hook_add = '''
  nmap <C-_> <Plug>(caw:hatpos:toggle)
  vmap <C-_> <Plug>(caw:hatpos:toggle)
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim' 

[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
build = '''
  git checkout release
'''
hook_add = '''
    inoremap <silent><expr> <TAB>
    \ pumvisible() ? "\<C-n>" :
    \ <SID>check_back_space() ? "\<TAB>" :
    \ coc#refresh()
    inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
    inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
    function! s:check_back_space() abort
      let col = col('.') - 1
      return !col || getline('.')[col - 1]  =~# '\s'
    endfunction
    nmap <silent> gd <Plug>(coc-definition)
    nmap <silent> gy <Plug>(coc-type-definition)
    nmap <silent> gi <Plug>(coc-implementation)
    nmap <silent> gr <Plug>(coc-references)
    nmap <silent> [g <Plug>(coc-diagnostic-prev)
    nmap <silent> ]g <Plug>(coc-diagnostic-next)
    nnoremap <silent> K :call <SID>show_documentation()<CR>
    
    function! s:show_documentation()
      if (index(['vim', 'help'], &filetype) >= 0)
        execute 'h '.expand('<cword>')
      else
        call CocAction('doHover')
      endif
    endfunction

    " auto format
    command! -nargs=0 Prettier :call CocAction('runCommand', 'prettier.formatFile')
    autocmd BufWritePre *.ts,*.tsx,*.js,*.jsx :Prettier
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
  nmap <silent> ,g :<C-u>Denite grep<CR>
  nmap <silent> ,b :<C-u>Denite buffer -split=floating<CR>

  nnoremap # :<C-u>Denite file/rec -split=floating file:new<CR>
  autocmd FileType denite call s:denite_my_settings()
  function! s:denite_my_settings() abort
    nnoremap <silent><buffer><expr> <CR>  denite#do_map('do_action')
    nnoremap <silent><buffer><expr> o     denite#do_map('do_action', 'split')
    nnoremap <silent><buffer><expr> v     denite#do_map('do_action', 'vsplit')
    nnoremap         <buffer><expr> t     denite#do_map('do_action', 'tabopen')
    nnoremap <silent><buffer><expr> d     denite#do_map('do_action', 'delete')
    nnoremap <silent><buffer><expr> p     denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr> <Esc> denite#do_map('quit')
    nnoremap <silent><buffer><expr> q     denite#do_map('quit')
    nnoremap <silent><buffer><expr> i     denite#do_map('open_filter_buffer')
  endfunction

  call denite#custom#var('file/rec', 'command', ['rg', '--files', '--glob', '!.git', '--glob', '!node_modules'])
  call denite#custom#var('grep', 'command', ['rg'])
  call denite#custom#var('grep', 'default_opts',
    \ ['-i', '--vimgrep', '--no-heading'])
  call denite#custom#var('grep', 'recursive_opts', [])
  call denite#custom#var('grep', 'pattern_opt', ['--regexp'])
  call denite#custom#var('grep', 'separator', ['--'])
  call denite#custom#var('grep', 'final_opts', [])
  call denite#custom#option('default', {'start_filter': 1})
'''

[[plugins]]
repo = 'rust-lang/rust.vim'
hook_add = '''
  let g:rustfmt_autosave = 1
'''
on_ft = ['rust']

